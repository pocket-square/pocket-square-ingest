
GitHub - irfansharif/cfilter: Cuckoo Filter implementation in Go, better than Bloom Filters
Skip to content
          Personal
 
          Open source
 
          Business
 
          Explore
 
Sign up
Sign in
Pricing
Blog
Support
Search GitHub
This repository
    Watch
  
    18
  
    Star
  
      593
    
        Fork
      
      18
    
irfansharif/cfilter
Code
 
Issues
3
 
Pull requests
0
 
    Projects
    0
    Pulse
    Graphs
            Cuckoo Filter implementation in Go, better than Bloom Filters
          
              14
            
            commits
        
            1
          
          branch
        
            2
          
          releases
        
              Fetching contributors
            
 
              MIT
          
Go
100.0%
Go
Clone or download
          Clone with HTTPS
          
          Use Git or checkout with SVN using the web URL.
        
  Download ZIP
      Find file
    
Branch:
master
Switch branches/tags
Branches
Tags
                master
              
Nothing to show
                v0.1.1
              
                v0.1.0
              
Nothing to show
        New pull request
      
      Latest commit
      
        983ed10
      
Jan 5, 2017
irfansharif
bug: rand bucket selection never selects last one
…
rand.Intn(n) is not inclusive of n, the 'n - 1' present is unnecessary.
Permalink
Failed to load latest commit information.
.gitignore
Initial commit
Jul 22, 2016
.travis.yml
Coveralls.io badge
Nov 7, 2016
LICENSE
v0.1 implementation, supplementary functions added
Aug 7, 2016
README.md
Coveralls.io badge
Nov 7, 2016
bucket.go
bug: rand bucket selection never selects last one
Jan 5, 2017
cfilter.go
fix cfilter.Insert(...) rebalancing (#9)
Dec 28, 2016
cfilter_test.go
Updated API to support more configuration
Sep 22, 2016
doc.go
refactored out hashing functions to maintain single state, added
Aug 7, 2016
fingerprint.go
Updated API to support more configuration
Sep 22, 2016
options.go
Updated API to support more configuration
Sep 22, 2016
      README.md
    
cfilter: Cuckoo Filter implementation in Go
Cuckoo filter is a Bloom filter replacement for approximated set-membership
queries. Cuckoo filters support adding and removing items dynamically while
achieving even higher performance than Bloom filters. For applications that
store many items and target moderately low false positive rates, cuckoo filters
have lower space overhead than space-optimized Bloom filters.
Some possible use-cases that depend on approximated set-membership queries
would be databases, caches, routers, and storage systems where it is used to
decide if a given item is in a (usually large) set, with some small false
positive probability. Alternatively, given it is designed to be a viable
replacement to Bloom filters, it can also be used to reduce the space required
in probabilistic routing tables, speed longest-prefix matching for IP
addresses, improve network state management and monitoring, and encode
multicast forwarding information in packets, among many other applications.
Cuckoo filters provide the flexibility to add and remove items dynamically. A
cuckoo filter is based on cuckoo hashing (and therefore named as cuckoo
filter).  It is essentially a cuckoo hash table storing each key's fingerprint.
Cuckoo hash tables can be highly compact, thus a cuckoo filter could use less
space than conventional Bloom filters, for applications that require low false
positive rates (< 3%).
For details about the algorithm and citations please refer to the original
research paper, "Cuckoo Filter: Better Than Bloom" by Bin Fan, Dave Andersen
and Michael Kaminsky.
Interface
A cuckoo filter supports following operations:
 Insert(item): insert an item to the filter
 Lookup(item): return if item is already in the filter (may return false
positive results like Bloom filters)
 Delete(item): delete the given item from the filter. Note that to use this
method, it must be ensured that this item is in the filter (e.g., based on
records on external storage); otherwise, a false item may be deleted.
 Count(): return the total number of items currently in the filter
Example Usage
import "github.com/irfansharif/cfilter"
cf := cfilter.New()
// inserts 'buongiorno' to the filter
cf.Insert([]byte("buongiorno"))
// looks up 'hola' in the filter, may return false positive
cf.Lookup([]byte("hola"))
// returns 1 (given only 'buongiorno' was added)
cf.Count()
// tries deleting 'bonjour' from filter, may delete another element
// this could occur when another byte slice with the same fingerprint
// as another is 'deleted'
cf.Delete([]byte("bonjour"))
This repository was featured on Hacker News, front page (discussion
here). Another implementation
in Go can be found at
seiflotfy/cuckoofilter and is where I borrowed
the ideas for my tests, notably TestMultipleInsertions. The original
implementation in C++ by the authors of the research paper can be found at
efficient/cuckoofilter.
Author
Irfan Sharif: irfanmahmoudsharif@gmail.com, @irfansharifm
License
cfilter source code is available under the MIT License.
Contact GitHub
API
Training
Shop
Blog
About
© 2017 GitHub, Inc.
Terms
Privacy
Security
Status
Help
      You can't perform that action at this time.
    
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
